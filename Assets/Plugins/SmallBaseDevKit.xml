<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmallBaseDevKit</name>
    </assembly>
    <members>
        <member name="T:SmallBaseDevKit.Factory.IFactory">
            <summary>
            Интерфейс реализации фабрики объектов.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.Factory.IFactory.CreateNewObject``1(System.Object)">
            <summary>
            Метод создания объекта согласно его типу.
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="prototype">Прототип объекта.</param>
            <returns>Копия объекта.</returns>
        </member>
        <member name="T:SmallBaseDevKit.Game">
            <summary>
            Класс для реализации быстрых команд.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.Game.CreateUnit``1(UnityEngine.ScriptableObject)">
            <summary>
            Метод по созданию нового игрового юнита с учетом его настроек.
            </summary>
            <typeparam name="CreateUnit">Тип юнита.</typeparam>
            <returns>Реализация юнита.</returns>
        </member>
        <member name="M:SmallBaseDevKit.Game.DestroyUnit``1(``0)">
            <summary>
            Метод по уничтожению юнита.
            </summary>
            <typeparam name="CurrentUnit"></typeparam>
            <param name="unit"></param>
        </member>
        <member name="M:SmallBaseDevKit.Game.AddUnitState``1(SmallBaseDevKit.USH.Unit.IUnit,SmallBaseDevKit.AddStateType)">
            <summary>
            Метод добавления состояния в игровую единицу.
            </summary>
            <typeparam name="AddState">Тип состояния.</typeparam>
            <param name="unit"></param>
            <param name="addStateType">Тип вставки в список.</param>
        </member>
        <member name="M:SmallBaseDevKit.Game.RemoveUnitState``1(SmallBaseDevKit.USH.Unit.IUnit)">
            <summary>
            Метод удаления из игровой единицы указаногого состояния.
            </summary>
            <typeparam name="RemoveState">Тип состояния.</typeparam>
            <param name="unit"></param>
        </member>
        <member name="T:SmallBaseDevKit.Main.GameInstance">
            <summary>
            Класс-инициализатор в котором хранятся все необходимые игровые модули.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.Main.GameInstance.GetGameModule``1">
            <summary>
            Метод получения конктреного модуля.
            </summary>
            <typeparam name="T">Тип моудля.</typeparam>
            <returns>Объект модуля.</returns>
        </member>
        <member name="T:SmallBaseDevKit.Main.MonoSingleton`1">
            <summary>
            Класс одиночка для игровых объектов.
            </summary>
            <typeparam name="T">Наследник <see cref="T:UnityEngine.MonoBehaviour"/></typeparam>
        </member>
        <member name="T:SmallBaseDevKit.GameModule.BaseGameModule">
            <summary>
            Базовый класс для всех игровых модулей. Обращение к реализации модуля через 
            <see cref="T:SmallBaseDevKit.Main.GameInstance"/>.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.GameModule.GlobalEventModule">
            <summary>
            Класс с реализацией глобального обмена сообщения в игре.
            Реализовано через <see cref="T:System.EventHandler"/>
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.GameModule.GlobalEventModule.AddEvent(System.Type,System.EventHandler)">
            <summary>
            Добавление слушателя в модуль обмена сообщениями.
            </summary>
            <param name="eventKey">Уникальный ключ события, равен типу релизации <see cref="T:System.EventArgs"/></param>
            <param name="eventHandler">Метод обрабоки события.</param>
        </member>
        <member name="M:SmallBaseDevKit.GameModule.GlobalEventModule.ExecuteEvent(System.EventArgs,System.Object)">
            <summary>
            Обработка и выполнение события у всех слушателей.
            </summary>
            <param name="eventArgs">Данные события.</param>
            <param name="sender">Источник события.</param>
        </member>
        <member name="M:SmallBaseDevKit.GameModule.GlobalEventModule.RemoveEvent(System.Type,System.EventHandler)">
            <summary>
            Удаление слушателя в модуле обмена сообщениями.
            </summary>
            <param name="eventKey">Уникальный ключ события, равен типу релизации <see cref="T:System.EventArgs"/></param>
            <param name="eventHandler">Метод обработки события.</param>
        </member>
        <member name="M:SmallBaseDevKit.GameModule.GlobalEventModule.GetEventArgByType``1">
            <summary>
            Получаем из пула шаблон данных сообщения.
            </summary>
            <typeparam name="T">Тип сообщения.</typeparam>
            <returns></returns>
        </member>
        <member name="T:SmallBaseDevKit.IRegistrator`1">
            <summary>
            Интрефейс для регистра чего либо.
            </summary>
            <typeparam name="T">Тип объект, что будем регистрировать.</typeparam>
        </member>
        <member name="M:SmallBaseDevKit.IRegistrator`1.Registration(`0)">
            <summary>
            Добавляем объект в регистор.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SmallBaseDevKit.IRegistrator`1.Unregistration(`0)">
            <summary>
            Удаляем объект из регистра.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:SmallBaseDevKit.IUpdtable">
            <summary>
            Интерфейс для runtime-обновляемых объектов в игре. Обновление через единный помощник - GameUpdateHandler.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.Pool.IPool`1">
            <summary>
            Интерфейс игрового пула.
            </summary>
            <typeparam name="T">Тип объекта./></typeparam>
        </member>
        <member name="M:SmallBaseDevKit.Pool.IPool`1.GetObject(System.Object)">
            <summary>
            Получаем объект из пула. Объект удаляется из пула.
            </summary>
            <param name="objectPrototype">Прототип объекта.</param>
            <returns>Объект пула.</returns>
        </member>
        <member name="M:SmallBaseDevKit.Pool.IPool`1.ReturnObject(`0)">
            <summary>
            Возвращения объекта в пул. 
            </summary>
            <param name="poolObject">Текущий объект.</param>
        </member>
        <member name="M:SmallBaseDevKit.Pool.IPool`1.PoolDebugView">
            <summary>
            Метод проверки наполенения пула для дебага.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.Pool.LinePool`1">
            <summary>
            Пул-список для многоразовых объектов в единичном экзепляре.
            </summary>
            <typeparam name="T">Тип объекта./></typeparam>
        </member>
        <member name="T:SmallBaseDevKit.Pool.Specification.BasePoolSpecification`1">
            <summary>
            Абстрактная релизация спецификации игровго пула.
            </summary>
            <typeparam name="T">Тип объекта./></typeparam>
        </member>
        <member name="M:SmallBaseDevKit.Pool.Specification.BasePoolSpecification`1.CheckInputPrototypeData(System.Object)">
            <summary>
            Проверка входных данных на тип данных в пулле.
            </summary>
            <param name="objectPrototype">Входящий прототип.</param>
            <returns>Продолжаем работу с входящим прототипом.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SmallBaseDevKit.Pool.Specification.BasePoolSpecification`1.ExceptionAction(System.Exception,System.Object)">
            <summary>
            Обработка ошибки в пулле через - 
            <see cref="T:SmallBaseDevKit.GameException.ExceptionHandler"/>
            </summary>
            <param name="e">Ошибка.</param>
            <param name="objectPrototype">Входящий прототип.</param>
        </member>
        <member name="T:SmallBaseDevKit.Pool.Specification.BaseLinePoolSpecification`1">
            <summary>
            Абстрактная спецификация для пула-списка.
            </summary>
            <typeparam name="T">Тип объекта./></typeparam>
        </member>
        <member name="M:SmallBaseDevKit.Pool.Specification.BaseLinePoolSpecification`1.EqualObjectPrediction(System.Object,System.Object)">
            <summary>
            Условие проверки соотвествия двух объектов в пуле
            </summary>
            <param name="pivotObject"></param>
            <param name="checkObject"></param>
            <returns></returns>
        </member>
        <member name="T:SmallBaseDevKit.Pool.Specification.LineByName`1">
            <summary>
            Спецификация пула-списка по хранению объектов по имени.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SmallBaseDevKit.Pool.Specification.BaseTablePoolSpecification`2">
            <summary>
            Абстракция по специкации пула-таблицы.
            </summary>
            <typeparam name="K">Уникальный ключ согласно спецификации.</typeparam>
            <typeparam name="T">Тип объекта./></typeparam>
        </member>
        <member name="M:SmallBaseDevKit.Pool.Specification.BaseTablePoolSpecification`2.GetPrototypeKey(System.Object)">
            <summary>
            Метод по обработке прототипа и получения уникального ключа для хранения объектов. 
            </summary>
            <param name="prototypeObject">Протип объекта.</param>
            <returns>Уникальный ключ согласно спецификации.</returns>
        </member>
        <member name="T:SmallBaseDevKit.Pool.Specification.TableByName`1">
            <summary>
            Спецификация пулла, где ключем является имя объекта.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SmallBaseDevKit.Pool.Specification.TableByType`1">
            <summary>
            Спецификация пулла где ключем является Type объекта.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SmallBaseDevKit.Pool.TablePool`1">
            <summary>
            Пул-таблица для хранения большого числа объектов.
            </summary>
            <typeparam name="T">Тип объекта./></typeparam>
        </member>
        <member name="T:SmallBaseDevKit.USH.State.RequiredHandlerAttribute">
            <summary>
            Атрибут для подключения состояния юнита к обработчику.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.USH.State.StatePredictionAttribute">
            <summary>
            Атрибут для назначения условия выполнения "состояния".
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.StatePredictionAttribute.CreateStatePrediciton(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Создаем делегат функции.
            </summary>
            <param name="target">Объект применения делегата.</param>
            <param name="info">Информация о методе.</param>
            <returns>Делегат на метод.</returns>
        </member>
        <member name="T:SmallBaseDevKit.USH.State.BaseUnitState`1">
            <summary>
             Базовый класс для описания всех актуальных состояний, которые может принимать игровоя единица.
             Для метода завершения состояния - <see cref="M:SmallBaseDevKit.USH.State.IState.CheckCompliteState"/>, необходимо в тело класса добавить функции с атрибутом [<see cref="T:SmallBaseDevKit.USH.State.StatePredictionAttribute"/>]
            </summary>
            <typeparam name="T">Данные состояния.</typeparam>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.BaseUnitState`1.Deconstruct(`0@)">
            <summary>
            Метод по получению хранящихся данных в актуальномы состояние.
            </summary>
            <param name="stateParam">Конкретный тип данных или <see cref="T:System.ValueTuple"/>.</param>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.BaseUnitState`1.ExtendedSetupState">
            <summary>
            Метод расширенных настроек потомков состояния.
            <para>Вызвается после получения ссылки на игровую единицу.</para>
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.BaseUnitState`1.ExtendedStateComplite">
            <summary>
            Метод расширенного удаления потомков состояния.
            <para>Вызывается после отправки состояния в пул.</para>
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.BaseUnitState`1.SetupStatePrediction">
            <summary>
            Настройка всех условий выполнения для текущего состояния.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.BaseUnitState`1.SetupHandler">
            <summary>
            Настройка подключения к игровой логике.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.USH.State.IState">
            <summary>
            Интерфейс для всех актуальных состояний, которые может принимать игровая единица.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.IState.SetupState(SmallBaseDevKit.USH.Unit.IUnit)">
            <summary>
            Первичная настройка актуального сосотяния.
            </summary>
            <param name="owner">Текущая игровая единица.</param>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.IState.Execute">
            <summary>
            Выполнить логику актуального состояния.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.IState.CheckCompliteState">
            <summary>
            Проверить все условия выполнения в актуальном состояние, по умолчанию состояние не имеет заверщения (false).
            <para>Если более 1 условия выполнения состояния, то происходит логическое умножение всех условий.</para>
            <example>Как пример, объявление функции проверки в классе состояния:
            <code>
            [<see cref="T:SmallBaseDevKit.USH.State.StatePredictionAttribute"/>]
            <code>bool SomeStatePredictionFunction(){...}</code>
            </code>
            </example>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:SmallBaseDevKit.USH.State.IState.StateRemove">
            <summary>
            Возвращение актуального состояния в пул-таблицу всех состояний.
            <see cref="T:SmallBaseDevKit.Pool.TablePool`1"/>
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.USH.Handler.BaseGameHandler">
            <summary>
            Базовый класс для релиазации игровой логики. Подключать нужно через атрибут <see cref="T:SmallBaseDevKit.USH.State.RequiredHandlerAttribute"/>.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Handler.BaseGameHandler.ConvertStateToType``1(SmallBaseDevKit.USH.State.IState)">
            <summary>
            Метод конвертации входящего состояния в рабочее.
            </summary>
            <typeparam name="T">Тип состояния с которым будет работать логика.</typeparam>
            <param name="currenState">Входящее состояние.</param>
            <returns>Актуальное состояние.</returns>
        </member>
        <member name="T:SmallBaseDevKit.USH.Handler.IHandler">
            <summary>
            Интерфейс для реализации игровой логики.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Handler.IHandler.ExecuteHandlerLogic(SmallBaseDevKit.USH.State.IState)">
            <summary>
            Выполнить логику 
            </summary>
            <param name="currentState"></param>
        </member>
        <member name="T:SmallBaseDevKit.USH.Unit.BaseUnit`1">
            <summary>
            Базовый класс игровой единицы, которая хранит в себе ряд актуальных состояний (<see cref="T:SmallBaseDevKit.USH.State.BaseUnitState`1"/>).
            </summary>
            <typeparam name="UnitData">Входные данные настройки юнита, формат - <see cref="T:UnityEngine.ScriptableObject"/>.</typeparam>
        </member>
        <member name="F:SmallBaseDevKit.USH.Unit.BaseUnit`1.componentHandler">
            <summary>
            Слой с Unity компонентами что использует игровая единица. Необхоидмо произвести настройку в потомках BaseUnit. <see cref="M:SmallBaseDevKit.USH.Unit.ComponentHandler.SetupComponentHandler``1(``0,UnityEngine.GameObject)"/>
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.BaseUnit`1.ExtendedSetupUnit(`0)">
            <summary>
            Метод расширенной настройки для потомков.
            <para>Вызывается после получения основных данных игровой единицы в момет создания экземпляра класса.</para>
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.BaseUnit`1.ExtendedDestroyUnit">
            <summary>
            Метод расширенного уничтожения для потомков.
            <para>Вызывается до очистки списка состояний и возврата в единицы в пул.</para>
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.USH.Unit.ComponentHandler">
            <summary>
            Класс по хранению и работе с Unity компонентами, что использует игровая единица.
            <para>Может подключать  нужные компоненты в момент создания игровой единицы, через <see cref="T:UnityEngine.RequireComponent"/></para>
            <para>По умолчанию собирает все компоненты, включая дочерние компоненты, из целевого GameObject.т</para>
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.ComponentHandler.SetupComponentHandler``1(``0,UnityEngine.GameObject)">
            <summary>
            Метод настройки класса с Unity компонентамию. Может обрабатывать атрибут <see cref="T:UnityEngine.RequireComponent"/>, что использует класс инициализатор.
            </summary>
            <typeparam name="T">Тип игровой единицы.</typeparam>
            <param name="unit"></param>
            <param name="targetObject"></param>
        </member>
        <member name="T:SmallBaseDevKit.USH.Unit.IUnit">
            <summary>
            Интрефейс для всех игровых единиц со сложной логикой через актуальные состояния.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.CreateUnit``1(``0)">
            <summary>
            Создание игрового юнита с входными данными.
            </summary>
            <typeparam name="Data">Тип данных для игровго юнита.</typeparam>
            <param name="unitData"></param>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.AddUnitState``1(SmallBaseDevKit.AddStateType)">
            <summary>
            Добавить к игровой единице текущее состояние.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.GetUnitState``1">
            <summary>
            Получить актуальное состояние по его типу.
            </summary>
            <typeparam name="State">Тип состояния.</typeparam>
            <returns>Актуальное состояние.</returns>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.RemoveState``1">
            <summary>
            Удалить у игровой единицы текущее состояние.
            </summary>
            <typeparam name="RemoveState"></typeparam>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.TryGetUnitComponent``1(``0@)">
            <summary>
            Получить Unity-компнент по его типу.
            </summary>
            <typeparam name="C">Тип компонента.</typeparam>
            <returns>Unity-компонент.</returns>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.DestroyUnit">
            <summary>
            Удаление игрового юнита.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.USH.Unit.IUnit.UpdateUnitState">
            <summary>
            Обновить все состояния юнита выполняется в независимости от методов OnUpdate() и OnFixedUpdate().
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.AddStateType">
            <summary>
            Тип определяющий в какую часть списка вставлять актуальное состояние.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.GameException.EditorGameException">
            <summary>
            Релизация обработки ошибки по умолчанию - <see cref="N:UnityEditor"/>.
            </summary>
        </member>
        <member name="T:SmallBaseDevKit.GameException.ExceptionHandler">
            <summary>
            Обработчик ошибки в игре.
            </summary>
        </member>
        <member name="F:SmallBaseDevKit.GameException.ExceptionHandler.ExceptionEvent">
            <summary>
            Эвент по обработке ошибки взависимости от платформы, по умолчанию - <see cref="T:SmallBaseDevKit.GameException.EditorGameException"/>.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.GameException.ExceptionHandler.ExceptionProcessExecute(System.Exception,System.String)">
            <summary>
            Метод обработки ошибки.
            </summary>
            <param name="e">Ошибка.</param>
            <param name="msg">Дополнительное сообщение..</param>
        </member>
        <member name="T:SmallBaseDevKit.GameException.IGameException">
            <summary>
            Интерфейс релизации обработки ошибки в зависимости от платформы.
            </summary>
        </member>
        <member name="M:SmallBaseDevKit.GameException.IGameException.ExceptionProcessExecute(System.Exception,System.String)">
            <summary>
            Метод обработки игровой ошибки с учетом спецификации.
            </summary>
            <param name="e">Ошибка.</param>
            <param name="msg">Дополнительное сообщение.</param>
        </member>
        <member name="T:GameUtiles">
            <summary>
            Класс со всякой "полезностью" для игры.
            </summary>
        </member>
        <member name="M:GameUtiles.ContainObjectInLinkedList``1(System.Collections.Generic.LinkedList{``0},System.Object,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Метод поиска в связном списке определенного объекта, с учетом выполнения поискового условия.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="list">Текущий связный список объектов.</param>
            <param name="equalCallback">Условие соотвествия поиска.</param>
            <param name="pivotObject">Сравниваемый объект.</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:GameUtiles.TryGetObjectInLinkedList``1(System.Collections.Generic.LinkedList{``0},System.Object,``0@,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Метод по получению объекта из связного списка, с учетом выполнения поискового условия.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="list">Текущий связный список.</param>
            <param name="equalCallback">Условие поиска.</param>
            <param name="pivotObject">Объект сравнивания.</param>
            <param name="findObject">Найденый объект.</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:GameUtiles.CreateObjectInGameFactory``1(System.Object)">
            <summary>
            Метод по созданию чего угодно через игровую фабрику.
            </summary>
            <typeparam name="T">Тип объекта.</typeparam>
            <param name="prototype">Прототип объекта.</param>
            <returns>Реализация объекта.</returns>
        </member>
        <member name="T:DebugColor">
            <summary>
            Тип цвета для сообщения.
            </summary>
        </member>
        <member name="T:_Debug">
            <summary>
            Класс по релизации вывод сообщений с использованеим цвета.
            </summary>
        </member>
        <member name="M:_Debug.Log(System.Object,DebugColor)">
            <summary>
            Метод вывода сообщения в консоль.
            </summary>
            <param name="message">Объект сообщения.</param>
            <param name="color">Цвет сообщения.</param>
        </member>
    </members>
</doc>
